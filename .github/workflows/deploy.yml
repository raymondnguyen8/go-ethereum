name: gcp deploy

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
        - uses: actions/checkout@v4
        - name: Authenticate with Google Cloud
          id: auth
          uses: google-github-actions/auth@v2
          with:
            workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
            service_account: ${{ secrets.GCP_SA_EMAIL }}
        - name: Set up Google Cloud SDK
          uses: google-github-actions/setup-gcloud@v2
          with:
            project_id: ${{ secrets.GCP_PROJECT_ID }}
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3
        - name: Login to Google Cloud Registry
          uses: docker/login-action@v3
          with:
            registry: gcr.io
            username: oauth2accesstoken
            password: ${{ steps.auth.outputs.access_token }}
        # - name: Build and push Docker image with cache
        #   uses: docker/build-push-action@v6
        #   with:
        #     context: .
        #     file: ./Dockerfile
        #     push: true
        #     tags: gcr.io/${{ secrets.GCP_PROJECT_ID }}/krnl-geth:latest
        #     cache-from: type=gha
        #     cache-to: type=gha,mode=max
        - name: Check if Firewall Rule Exists
          run: |
            if gcloud compute firewall-rules list --filter="name=allow-multiple-ports" --format="value(name)" | grep -q 'allow-multiple-ports'; then
              echo "firewall_exists=true" >> $GITHUB_ENV
            else
              echo "firewall_exists=false" >> $GITHUB_ENV
            fi
        - name: Create Firewall Rule
          if: env.firewall_exists == 'false'
          run: |
            gcloud compute firewall-rules create allow-multiple-ports \
              --allow tcp:8545,tcp:8546,tcp:30303,udp:30303 \
              --source-ranges 0.0.0.0/0 \
              --target-tags allow-multiple-ports || true
        - name: Remove existing instance
          run: |
            gcloud compute instances delete geth-i386 --zone=asia-southeast1-b --quiet || true
        - name: Deploy to GCE
          run: |
            gcloud compute instances create-with-container geth-i386 \
              --zone=asia-southeast1-b \
              --machine-type=e2-micro \
              --container-image=gcr.io/${{ secrets.GCP_PROJECT_ID }}/krnl-geth:latest \
              --boot-disk-size=10GB \
              --tags=allow-multiple-ports \
              --metadata=startup-script='#!/bin/bash
              curl -sSO https://dl.google.com/cloudagents/add-google-cloud-ops-agent-repo.sh
              sudo bash add-google-cloud-ops-agent-repo.sh --also-install'
  stress-test:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
        - uses: actions/checkout@v4
        - name: Authenticate with Google Cloud
          uses: google-github-actions/auth@v2
          with:
            credentials_json: ${{ secrets.GCP_SA_KEY }}
        - name: Set up Google Cloud SDK
          uses: google-github-actions/setup-gcloud@v2
          with:
            project_id: ${{ secrets.GCP_PROJECT_ID }}
        - name: Get Geth IP
          run: |
            EXTERNAL_IP=$(gcloud compute instances describe geth-i386 --zone=asia-southeast1-b --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
            echo "EXTERNAL_IP=$EXTERNAL_IP" >> $GITHUB_ENV
        - name: Install related tools
          run: |
            npm install web3
            npm install -g pandoras-box
        - name: Make sure Geth is ready
          run: |
            while ! nc -z $EXTERNAL_IP 8545; do
              sleep 1
            done
        - name: Send ETH
          run: node sendEth.js
        - name: Run stress test
          run: pandoras-box -url http://$EXTERNAL_IP:8545 -m "erupt oven loud noise rug proof sunset gas table era dizzy vault" -t 1 -b 1 -o ./myOutput.json